Concurrency and Multithreading

Concept:

Imagine you are organizing a pizza party with your friends. There are several tasks involved in organizing the party, such
as preparing the pizza dough, chopping vegetables, baking the pizza, and serving it to your friends. Let's see how concurrency
and multithreading can be applied to make the process more efficient.

1. Concurrency: Suppose you have a group of friends, each assigned to a specific task. They work concurrently to complete 
their tasks independently, allowing the pizza preparation process to proceed smoothly without waiting for each task to finish before starting the next.

2. Multithreading: Instead of performing each task sequentially, you can divide the work among multiple friends who work 
simultaneously. Each friend represents a thread, and each task represents a function that the thread executes.

Here's how the concurrency and multithreading can be applied in this scenario:
1. Concurrency: Each friend independently performs their assigned task. For example, one friend prepares the pizza dough, another
chops the vegetables, and another friend preheats the oven. They can work concurrently without waiting for each other.
2. Multithreading: Instead of having one friend perform the entire pizza preparation process, you divide the tasks into smaller
units and assign each task to a separate friend. For example, one friend handles the dough preparation, another friend handles 
vegetable chopping, and so on. Each friend works independently but concurrently, making progress on their respective tasks.

By applying concurrency and multithreading, you can leverage the combined efforts of your friends to prepare the pizza faster. While
one friend is rolling out the dough, another friend can be chopping vegetables, and yet another friend can be preheating the oven. 
This way, you can achieve a higher level of efficiency and get the pizza ready in less time.

Note that in this example, the tasks are independent of each other, allowing them to be executed concurrently. However, if any task
requires synchronization or sharing of resources, additional considerations like locks or synchronization mechanisms would be necessary
to ensure proper coordination among the threads.

Overall, the application of concurrency and multithreading in this pizza party example demonstrates how dividing tasks among multiple
individuals and allowing them to work concurrently can improve efficiency and accomplish the goal faster.

For example: Imagine you have three friends: Alice, Bob, and Carol. Each friend is assigned a specific task. To achieve concurrency, 
each friend works independently on their task without waiting for others. They can use different parts of the kitchen counter to perform
their tasks simultaneously.

To implement multithreading, you can simulate the friends as separate threads in a program. Each friend's task is represented by a function
that the thread executes. Here's a Python example using the threading module:

        import threading

        # Function to simulate rolling out the dough
        def roll_dough():
            print("Alice is rolling out the pizza dough.")

        # Function to simulate chopping vegetables
        def chop_vegetables():
            print("Bob is chopping the vegetables.")

        # Function to simulate baking the pizza
        def bake_pizza():
            print("Carol is baking the pizza.")

        # Create threads for each friend's task
        alice_thread = threading.Thread(target=roll_dough)
        bob_thread = threading.Thread(target=chop_vegetables)
        carol_thread = threading.Thread(target=bake_pizza)

        # Start the threads to execute the tasks concurrently
        alice_thread.start()
        bob_thread.start()
        carol_thread.start()

        # Wait for all threads to finish
        alice_thread.join()
        bob_thread.join()
        carol_thread.join()

        # Once all threads have finished, the pizza is ready!
        print("Pizza party is complete!")

    
When you run this program, you'll see the output showing each friend performing their task concurrently:

        Alice is rolling out the pizza dough.
        Bob is chopping the vegetables.
        Carol is baking the pizza.
        Pizza party is complete!
